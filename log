diff --git a/configfile.h b/configfile.h
index b186a4c..cb8eae4 100755
--- a/configfile.h
+++ b/configfile.h
@@ -89,7 +89,8 @@ typedef enum {
 	cache_sram_ways_token,
 	cache_sttram_ways_token,
 	cache_sram_size_token,
-	cache_sttram_size_token
+	cache_sttram_size_token,
+	clean_write_mode_token
 
 }token_t;
 
@@ -235,7 +236,9 @@ token_t tokenize(char * input){
 		return cache_sram_size_token;
 	} else if (strncmp(input,"CACHE_SIZE_STTRAM",length)==0){
 		return cache_sttram_size_token;
-	}
+	} else if (strncmp(input,"clean_write_mode",length)==0){
+        return clean_write_mode_token;
+    }
 	else {
         printf("PANIC :Unknown token %s\n",input);
         return unknown_token;
@@ -594,6 +597,10 @@ void read_config_file(FILE * fin)
 				fscanf(fin,"%d",&input_int);
 				CACHE_SIZE_STTRAM = input_int;
 				break;
+            case clean_write_mode_token:
+                fscanf(fin,"%d",&input_int);
+                clean_write_mode = input_int;
+                break;
             case unknown_token:
             default:
                 printf("PANIC: bad token in cfg file\n");
diff --git a/log b/log
index 1ac0985..e69de29 100644
--- a/log
+++ b/log
@@ -1,406 +0,0 @@
-diff --git a/src/main.c b/src/main.c
-index 04f7c6c..21d742e 100755
---- a/src/main.c
-+++ b/src/main.c
-@@ -49,7 +49,7 @@ nodePointer head=NULL;
- 
- Hashtable *cl_table = NULL;
- 
--Element* insertnode(uns64 addr, char optype)
-+Element* insertnode(uns64 addr, char optype, int compressedSize)
- {
-     Element* elm=lookup(cl_table, addr);
- 
-@@ -63,6 +63,7 @@ Element* insertnode(uns64 addr, char optype)
-         else if(optype=='W'){
-             elm->wr_cnt+=1;
-         }
-+        elm->compressedSize=compressedSize;
-         return elm;
-     }
-     else //if not, insert the key and value
-@@ -74,6 +75,7 @@ Element* insertnode(uns64 addr, char optype)
-         else if(optype=='W'){
-             new_elm->wr_cnt+=1;
-         }
-+        new_elm->compressedSize=compressedSize;
- 
-         insert(cl_table,addr,new_elm);
-         return NULL;
-@@ -151,6 +153,15 @@ FILE *config_file=NULL;
- FILE *vi_file=NULL;
- int *prefixtable; /* For (multi-threaded) MT workloads only */
- 
-+
-+uns64 sram_install_cnt=0;
-+uns64 sram_write_cnt=0;
-+uns64 sttram_install_cnt=0;
-+uns64 sttram_write_cnt=0;
-+
-+uns64 llc_install_cnt=0;
-+uns64 llc_bypass_cnt=0;
-+
- int main(int argc, char * argv[])
- {
-     
-@@ -378,6 +389,9 @@ int main(int argc, char * argv[])
- 	{
- 		for(numc=0; numc<NUMCORES; numc++)
- 		{
-+            if(ff_done[numc]==1)
-+                continue;
-+
- 			if (fgets(newstr,MAXTRACELINESIZE,tif[numc])) {
- 				inst_comp++;
- 				if (sscanf(newstr,"%d %c",&nonmemops[numc],&opertype[numc]) > 0) {
-@@ -386,7 +400,6 @@ int main(int argc, char * argv[])
- 							fprintf(stderr,"[1]Panic.  Poor trace format.%s\n",newstr);
- 							return -4;
- 						}
--						//todo
- 					}
- 					else {
- 						if (opertype[numc] == 'W') {
-@@ -412,12 +425,24 @@ int main(int argc, char * argv[])
- 
- 				//fill cache during the fast-forwording
- 				int L3Hit = isHit(L3Cache, addr[numc], false, compressedSize1Line[numc]); //addr[numc] is byte address here
--				if(L3Hit==0)
--                     install(L3Cache, addr[numc], instrpc[numc], false,compressedSize1Line[numc]);  //addr[numc] is byte address here
--					 
--				
-+                
-+                MCache_Entry victim;
-+                victim.valid=0;
-+                
-                 uns64 addr_tmp=addr[numc]>>6;
--                insertnode(addr_tmp, opertype[numc]);
-+                Element* elm=insertnode(addr_tmp, opertype[numc],compressedSize1Line[numc]);
-+
-+				if(L3Hit==0)
-+                {
-+                     victim=install(L3Cache, addr_tmp, instrpc[numc], false,compressedSize1Line[numc]);  //addr[numc] is byte address here
-+                     
-+                     if(!elm)
-+                        elm=lookup(cl_table, addr_tmp);
-+                
-+                     if(victim.valid)
-+                        elm->access_count=victim.access_count;
-+					
-+                }	 
- 						
- 			}
- 			else {
-@@ -540,7 +565,7 @@ int main(int argc, char * argv[])
- 							break;
- 						
-                         //lookup the cache line in the hash table
--                        Element* elm=insertnode(addr[numc]>>6,opertype[numc]);
-+                        Element* elm=insertnode(addr[numc]>>6,opertype[numc],compressedSize1Line[numc]);
- 
-                         if (opertype[numc] == 'R') 
-                         {
-@@ -551,6 +576,7 @@ int main(int argc, char * argv[])
-                             long long int wb_addr = 0;
-                             //long long int wb_inst_addr = 0;
-                             MCache_Entry victim;
-+                            victim.valid=0;
-                             int L3Hit = 0;
-                             
- 							if(ME_mode ||base_hybrid_mode)
-@@ -572,21 +598,22 @@ int main(int argc, char * argv[])
- 								if(ME_mode)
- 								{
- 									int is_write_intensive=0;
--									int is_llc_friendly=0;
-+									int is_llc_friendly=1;
- 
- 									if(elm)
- 									{
--										if((float)elm->wr_cnt/((float)elm->wr_cnt+(float)elm->rd_cnt)>0.4)
-+										if((float)elm->wr_cnt/((float)elm->wr_cnt+(float)elm->rd_cnt)>0.1)
- 											is_write_intensive=1;
- 
--										if(elm->access_count>0)
--											is_llc_friendly=1;
-+										if(elm->access_count==0)
-+											is_llc_friendly=0;
-+
- 
- 									}
- 									
- 									if(ME_bypassing_mode)
- 									{
--										if(is_llc_friendly){
-+										if(is_llc_friendly || compressedSize1Line[numc]>61){
- 											if(is_write_intensive)
- 											{
- 												victim=install(L3Cache_SRAM, addr[numc], instrpc[numc], false,compressedSize1Line[numc]);  //addr[numc] is byte address here
-@@ -597,10 +624,20 @@ int main(int argc, char * argv[])
- 												victim=install(L3Cache_STTRAM, addr[numc], instrpc[numc], false,compressedSize1Line[numc]);  //addr[numc] is byte address here
- 												installed_sram=0;
- 											}
-+                                            llc_install_cnt++;
- 										}
-+                                        else
-+                                            llc_bypass_cnt++;
- 									}
- 									else
- 									{
-+                                        if(!elm || compressedSize1Line[numc]>61) //if the cache line is new, install it into the sttram because the current miss is read miss.
-+                                        {
-+                                            victim=install(L3Cache_STTRAM, addr[numc], instrpc[numc], false,compressedSize1Line[numc]);  //addr[numc] is byte address here
-+                                            installed_sram=0;
-+                                        }
-+                                        else
-+                                        {
- 											if(is_write_intensive)
- 											{
- 												victim=install(L3Cache_SRAM, addr[numc], instrpc[numc], false,compressedSize1Line[numc]);  //addr[numc] is byte address here
-@@ -611,28 +648,45 @@ int main(int argc, char * argv[])
- 												victim=install(L3Cache_STTRAM, addr[numc], instrpc[numc], false,compressedSize1Line[numc]);  //addr[numc] is byte address here
- 												installed_sram=0;
- 											}
--									}
--								}
-+									    }
-+								    }
-+                                }
- 								else if(base_hybrid_mode)
-+                                {
- 									victim=install(L3Cache_STTRAM, addr[numc], instrpc[numc], false,compressedSize1Line[numc]);  //addr[numc] is byte address here
-+                                    installed_sram=0;
-+                                }
- 								else
-+                                {
- 									victim=install(L3Cache, addr[numc], instrpc[numc], false,compressedSize1Line[numc]);  //addr[numc] is byte address here
-+                                    installed_sram=1;
-+                                }
- 								
-+                                if(victim.valid)
-+                                {
-+                                    if(victim.access_count>0)
-+                                        llc_friendly_cacheline++;
-+                                    else
-+                                        llc_unfriendly_cacheline++;
-+                                
-+                                    //record the number of access count
-+                                    Element * elm_tmp=lookup(cl_table, victim.tag);
-+                                    elm_tmp->access_count=victim.access_count;
-+                                    
-+                                    int write_latency=0;
-+								    if(installed_sram){
-+									    write_latency=L3_LATENCY_WRITE_SRAM;
-+                                        sram_install_cnt++;
-+                                    }
-+								    else
-+                                    {
-+									    write_latency=L3_LATENCY_WRITE_STTRAM;
-+                                        sttram_install_cnt++;
-+                                    }
- 
--
--								if(victim.access_count>0)
--									llc_friendly_cacheline++;
--								else
--									llc_unfriendly_cacheline++;
--
--								int write_latency=0;
--								if(installed_sram)
--									write_latency=L3_LATENCY_WRITE_SRAM;
--								else
--									write_latency=L3_LATENCY_WRITE_STTRAM;
--
--				    			llc_available_cycle[banknum]=CYCLE_VAL+write_latency;
--								//todo: count the refetched cache line
-+				    		    	llc_available_cycle[banknum]=CYCLE_VAL+write_latency;
-+	
-+                                }
- 							}
-                             
-                             // Check to see if the read is for buffered data in write queue -
-@@ -648,7 +702,7 @@ int main(int argc, char * argv[])
-                                     ROB[numc].comptime[ROB[numc].tail] = CYCLE_VAL+L3_LATENCY+PIPELINEDEPTH;
-                             }else{
-                                 //evict all compressed cache lines in the victim data block
--                                 if(victim.dirty)
-+                                 if(victim.valid &&victim.dirty)
-                                  {
-                                      write_traffic++;
-                                      wb_addr = victim.tag << L3Cache->lineoffset;
-@@ -681,17 +735,26 @@ int main(int argc, char * argv[])
-                                 /* Also, add this to the write queue. */
-                                 long long int wb_addr = 0;
-                                 MCache_Entry victim;
-+                                victim.valid=0;
-                                 
- 								int L3Hit=0;
-+                                int is_hit_sram=0;
- 
- 								if(ME_mode ||base_hybrid_mode)
- 								{
- 									L3Hit = isHit(L3Cache_SRAM, addr[numc], false, compressedSize1Line[numc]); //addr[numc] is byte address here
- 									if(!L3Hit)
-+                                    {
- 										L3Hit = isHit(L3Cache_STTRAM, addr[numc], false, compressedSize1Line[numc]); //addr[numc] is byte address here
--								}
--								else
-+                                        is_hit_sram=0;    
-+								    }
-+                                    else
-+                                        is_hit_sram=1;
-+                                }
-+								else{
- 									L3Hit = isHit(L3Cache, addr[numc], false, compressedSize1Line[numc]); //addr[numc] is byte address here
-+                                    is_hit_sram=1;
-+                                }
- 
-                                 
-                                 if(L3Hit==0)
-@@ -704,61 +767,107 @@ int main(int argc, char * argv[])
- 									if(ME_mode)
- 									{
- 										int is_write_intensive=0;
--										int is_llc_friendly=0;
-+										int is_llc_friendly=1;
- 
- 										if(elm)
- 										{
--											if((float)elm->wr_cnt/((float)elm->wr_cnt+(float)elm->rd_cnt)>0.4)
-+											if((float)elm->wr_cnt/((float)elm->wr_cnt+(float)elm->rd_cnt)>0.2)
- 												is_write_intensive=1;
- 
--											if(elm->access_count>0)
--												is_llc_friendly=1;
-+											if(elm->access_count==0)
-+												is_llc_friendly=0;
- 										}
- 										
- 										if(ME_bypassing_mode)
- 										{
--											if(is_llc_friendly){
-+											if(is_llc_friendly || compressedSize1Line[numc]>61){
- 												if(is_write_intensive)
-+                                                {
- 													victim=install(L3Cache_SRAM, addr[numc], instrpc[numc], true,compressedSize1Line[numc]);  //addr[numc] is byte address here
-+                                                    installed_sram=1;
-+                                                }
- 												else
-+                                                {
- 													victim=install(L3Cache_STTRAM, addr[numc], instrpc[numc], true,compressedSize1Line[numc]);  //addr[numc] is byte address here
--											}
--										}
-+                                                    installed_sram=0;
-+											    }
-+                                                llc_install_cnt++;
-+										    }
-+                                            else
-+                                                llc_bypass_cnt++;
-+                                        }
- 										else
- 										{
-+                                            if(!elm || compressedSize1Line[numc]>61)// if the cache line is new, install it into the sram because the miss is write miss
-+                                            {
-+		                                    	victim=install(L3Cache_SRAM, addr[numc], instrpc[numc], true,compressedSize1Line[numc]);  //addr[numc] is byte address here
-+                                                installed_sram=1;
-+                                            }
-+                                            else
-+                                            {
- 												if(is_write_intensive)
-+                                                {
- 													victim=install(L3Cache_SRAM, addr[numc], instrpc[numc], true,compressedSize1Line[numc]);  //addr[numc] is byte address here
-+                                                    installed_sram=1;
-+                                                }
- 												else
-+                                                {
- 													victim=install(L3Cache_STTRAM, addr[numc], instrpc[numc], true,compressedSize1Line[numc]);  //addr[numc] is byte address here
--										}
--									}
-+                                                    installed_sram=0;
-+										        }
-+									        }
-+                                        }
-+                                    }
- 									else if(base_hybrid_mode)
-+                                    {
- 										victim=install(L3Cache_SRAM, addr[numc], instrpc[numc], true,compressedSize1Line[numc]);  //addr[numc] is byte address here
-+                                        installed_sram=1;
-+                                    }
- 									else
- 										victim=install(L3Cache, addr[numc], instrpc[numc], true,compressedSize1Line[numc]);  //addr[numc] is byte address here
- 									
--									int write_latency=0;
--									if(installed_sram)
--										write_latency=L3_LATENCY_WRITE_SRAM;
--									else
--										write_latency=L3_LATENCY_WRITE_STTRAM;
- 
--				    				llc_available_cycle[banknum]=CYCLE_VAL+write_latency;
--									//todo: count the refetched cache line
--									//	
--									if(victim.access_count>0)
--										llc_friendly_cacheline++;
--									else
--										llc_unfriendly_cacheline++;
--									
-+                                    if(victim.valid)
-+                                    {
-+                                        if(victim.access_count>0)
-+                                            llc_friendly_cacheline++;
-+                                        else
-+                                            llc_unfriendly_cacheline++;
-+                                    
-+                                        //record the number of access count
-+                                        Element * elm_tmp=lookup(cl_table, victim.tag);
-+                                        elm_tmp->access_count=victim.access_count;
-+	                                 
-+                                        int write_latency=0;
-+								        if(installed_sram)
-+                                        {
-+								         	write_latency=L3_LATENCY_WRITE_SRAM;
-+                                            sram_install_cnt++;
-+                                        }
-+								        else
-+                                        {
-+								         	write_latency=L3_LATENCY_WRITE_STTRAM;
-+                                            sttram_install_cnt++;
-+                                        }
-+    				    				llc_available_cycle[banknum]=CYCLE_VAL+write_latency;
-+                                     }
-                                 }
-                                 
-                                 if(L3Hit==1){
--				    				llc_available_cycle[banknum]=CYCLE_VAL+L3_LATENCY_WRITE;
-+                                    if(is_hit_sram)
-+                                    {
-+				    				    llc_available_cycle[banknum]=CYCLE_VAL+L3_LATENCY_WRITE_SRAM;
-+                                        sram_write_cnt++;
-+                                    }
-+                                    else
-+                                    {
-+                                        sttram_write_cnt++;
-+                                        llc_available_cycle[banknum]=CYCLE_VAL+L3_LATENCY_WRITE_STTRAM;
-+                                    }
-                                 }
-                                 else if(L3Hit == 0){
-                                     //evict all compressed cache lines in the victim data block
--                                    if(victim.dirty)
-+                                    if(victim.valid&&victim.dirty)
-                                     {
-                                         write_traffic++;
-                                         wb_addr = victim.tag << L3Cache->lineoffset;
-@@ -902,6 +1011,14 @@ int main(int argc, char * argv[])
-     printf("\nUSIMM_MEM_WRITES      \t : %lld\n",write_traffic);
-     printf("\nUSIMM_MEM_TRAFFIC     \t : %lld\n",read_traffic+write_traffic);
-     
-+    printf("\nSRAM_INSTALL_COUNT     \t : %lld\n",sram_install_cnt);
-+    printf("\nSTTRAM_INSTALL_COUNT     \t : %lld\n",sttram_install_cnt);
-+    printf("\nSRAM_WRITE_COUNT     \t : %lld\n",sram_write_cnt);
-+    printf("\nSTTRAM_WRITE_COUNT     \t : %lld\n",sttram_write_cnt);
-+    
-+    printf("\nLLC_BYPASS_COUNT    \t : %lld\n",llc_bypass_cnt);
-+    printf("\nLLC_INSTALL_COUNT     \t : %lld\n",llc_install_cnt);
-+    
-     
-     printf("\n\n ---- Per-Core Stat ---- \n");
-     //Per core stat
diff --git a/main.c b/main.c
index c08ef49..c8ff025 100755
--- a/main.c
+++ b/main.c
@@ -34,6 +34,10 @@ long long int victim_dirty=0;
 long long int victim_clean=0;
 long long int metadata_hit_cnt=0;
 long long int metadata_miss_cnt=0;
+long long int sram_read_hit=0;
+long long int sram_write_hit=0;
+long long int sttram_read_hit=0;
+long long int sttram_write_hit=0;
 //Memory Statistics
 unsigned long long int read_traffic=0;
 unsigned long long int write_traffic=0;
@@ -236,23 +240,38 @@ MCache_Entry llc_miss_handler(Addr addr,char optype, int compressedSize, Addr in
             }
             else*/
             {
-                if (!elm) //if the cache block is new
+                if (!elm) //if the cache block is new todo : choose type of llc depend on write & read
                 {
-                    victim = install(L3Cache_STTRAM, addr, instrpc, is_write,
-                                     compressedSize);  //addr[numc] is byte address here
-                    installed_sram = 0; // install it into the sttram because the current miss is read miss.
+                    if(!is_write){
+                        victim = install(L3Cache_STTRAM, addr, instrpc, is_write,
+                                         compressedSize);  //addr[numc] is byte address here
+                        installed_sram = 0; // install it into the sttram because the current miss is read miss.
+                    }
+                    else{
+                        victim = install(L3Cache_SRAM, addr, instrpc, is_write,
+                                         compressedSize);  //addr[numc] is byte address here
+                        installed_sram = 1; // install it into the sttram because the current miss is read miss.
+                    }
+
                 }
                 else {
                     if (elm->is_metadata == 0) // this cache block is refetched cache line, but it does not have metadata
                     {
-                        metadata_hit_cnt++;
-                        victim = install(L3Cache_STTRAM, addr, instrpc, is_write,
-                                         compressedSize);  //addr[numc] is byte address here
-                        installed_sram = 0; //install it into the sttram because the current miss is read miss.
+                        metadata_miss_cnt++;
+                        if(!is_write){
+                            victim = install(L3Cache_STTRAM, addr, instrpc, is_write,
+                                             compressedSize);  //addr[numc] is byte address here
+                            installed_sram = 0; // install it into the sttram because the current miss is read miss.
+                        }
+                        else{
+                            victim = install(L3Cache_SRAM, addr, instrpc, is_write,
+                                             compressedSize);  //addr[numc] is byte address here
+                            installed_sram = 1; // install it into the sttram because the current miss is read miss.
+                        }
 
                     } else // this cache block is refetched cache block, and it does not have metadata
                     {
-                        metadata_miss_cnt++;
+                        metadata_hit_cnt++;
                         if (is_write_intensive) {
                             victim = install(L3Cache_SRAM, addr, instrpc, is_write,
                                              compressedSize);  //addr[numc] is byte address here
@@ -266,9 +285,17 @@ MCache_Entry llc_miss_handler(Addr addr,char optype, int compressedSize, Addr in
                 }
             }
         }
-        else{
-            victim = install(L3Cache_STTRAM, addr, instrpc, is_write, compressedSize);  //addr[numc] is byte address here
-            installed_sram = 0; //install new cache block in sttram
+        else{//todo depend on is_write choose type of llc
+            if(!is_write){
+                victim = install(L3Cache_STTRAM, addr, instrpc, is_write,
+                                 compressedSize);  //addr[numc] is byte address here
+                installed_sram = 0; // install it into the sttram because the current miss is read miss.
+            }
+            else{
+                victim = install(L3Cache_SRAM, addr, instrpc, is_write,
+                                 compressedSize);  //addr[numc] is byte address here
+                installed_sram = 1; // install it into the sttram because the current miss is read miss.
+            }
         }
     }
     else
@@ -355,15 +382,16 @@ void victim_block_handler(MCache_Entry victim, MCache* L3Cache, int numc, int RO
             victim_clean++;
 
             if(ME_mode) {
-                //todo: clean write back
-                if(elm_victim->is_metadata==0) {
-                    write_traffic++;
-                    write_traffic_clean++;
-                    if (victim.comp_size < 61) // we will use 15bit as signature and 1bit to store metadata
+                if(clean_write_mode==1) {
+                    if (elm_victim->is_metadata == 0 && victim.comp_size < 61) {
+                        write_traffic++;
+                        write_traffic_clean++;
+                        // we will use 15bit as signature and 1bit to store metadata
                         elm_victim->is_metadata = 1;
 
-                    wb_addr = victim.tag << L3Cache->lineoffset;
-                    insert_write(wb_addr, CYCLE_VAL, numc, ROB_tail);
+                        wb_addr = victim.tag << L3Cache->lineoffset;
+                        insert_write(wb_addr, CYCLE_VAL, numc, ROB_tail);
+                    }
                 }
             }
         }
@@ -439,6 +467,7 @@ int main(int argc, char * argv[])
 	ME_mode=0;
 	hybrid_mode=0;
 	ME_bypassing_mode=0;
+	clean_write_mode=1;
     
     //To keep track of how much is done
     unsigned long long int inst_comp=0;
@@ -794,8 +823,13 @@ int main(int argc, char * argv[])
 							if(hybrid_mode)
 							{
 								L3Hit = isHit(L3Cache_SRAM, addr[numc], false, compressedSize1Line[numc]); //addr[numc] is byte address here
-								if(!L3Hit)
-									L3Hit = isHit(L3Cache_STTRAM, addr[numc], false, compressedSize1Line[numc]); //addr[numc] is byte address here
+								if(!L3Hit) {
+                                    L3Hit = isHit(L3Cache_STTRAM, addr[numc], false, compressedSize1Line[numc]); //addr[numc] is byte address here
+                                    if(L3Hit)//sttram hit
+                                        sttram_read_hit++;
+								}
+								else//sram hit
+								    sram_read_hit++;
 							}
 							else {
                                 L3Hit = isHit(L3Cache, addr[numc], false,
@@ -853,10 +887,14 @@ int main(int argc, char * argv[])
 									if(!L3Hit)
                                     {
 										L3Hit = isHit(L3Cache_STTRAM, addr[numc], true, compressedSize1Line[numc]); //addr[numc] is byte address here
-                                        is_hit_sram=0;    
+                                        is_hit_sram=0;
+                                        if(L3Hit)
+                                            sttram_write_hit++;
 								    }
-                                    else
-                                        is_hit_sram=1;
+                                    else {
+                                        is_hit_sram = 1;
+                                        sram_write_hit++;
+                                    }
                                 }
 								else{
 									L3Hit = isHit(L3Cache, addr[numc], true, compressedSize1Line[numc]); //addr[numc] is byte address here
@@ -1105,6 +1143,8 @@ int main(int argc, char * argv[])
     printf("METADATA HIT %lld\n",metadata_hit_cnt);
     printf("METADATA MISS %lld\n",metadata_miss_cnt);
 
+    printf("HITCNT %lld\t%lld\t%lld\t%lld\n",sram_read_hit,sram_write_hit,sttram_read_hit,sttram_write_hit);
+
     //Freeing all used memory
     for(int i = 0; i < NUMCORES; i++){
         //fclose(tif[i]);
diff --git a/params.h b/params.h
index 64fae1b..f8659df 100755
--- a/params.h
+++ b/params.h
@@ -11,6 +11,7 @@ int ME_mode;
 int ME_bypassing_mode;
 int hybrid_mode;
 int sttram_mode;
+int clean_write_mode;
 
 /********************/
 /* Processor params */
